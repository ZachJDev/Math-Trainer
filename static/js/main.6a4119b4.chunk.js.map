{"version":3,"sources":["Components/RadioGroup.js","Components/CheckboxGroup.js","Components/Modes.js","Components/Options.js","Components/Problem.js","Components/Input.js","Components/GameOverMessage.js","Components/MathTrainer.js","Components/StartPage.js","App.js","serviceWorker.js","index.js"],"names":["RadioGroup","handleChange","e","props","this","radios","map","r","key","id","className","radioClass","onChange","type","name","value","checked","disabled","htmlFor","Component","CheckboxGroup","event","target","boxes","boxVal","includes","enabledList","getRandom","array","Math","floor","random","length","BASE_RULES","max","min","startTime","totalProblems","practice","hasNumProbs","hasStartClock","allowedSigns","GameMode","params","Object","assign","hasTimer","bonus","ticks","clockDirection","hasSkip","challengeIncrease","Number","n1","n2","s","sign","signs","getNewNumbers","getRandomInt","options","mode","Normal","Blitz","Zen","MultiplicationTables","hasPractice","description","initGame","table","problem","i","j","push","nums","inOrder","filter","tuples","probNum","problemCount","Rules","keys","Modes","forEach","getDefaultRules","Options","handleSubmit","preventDefault","state","canStart","setState","handleOptions","handleCheckboxChange","values","practiceEnable","numProbsEnable","startClockEnable","chooseSignsEnable","rangeWarning","buttonClasses","onSubmit","Problem","num1","num2","children","Input","handleInput","handleUpdateProblem","isGameOver","restart","updateProblem","input","autoFocus","onClick","GameOverMessage","handleRestart","timeMessage","solved","timeElapsed","message","goal","mins","secs","MathTrainer","wasSkipped","answer","Game","getNewProblem","h","compute","timeLeft","val","problems","isFinished","endGame","increaseChallenge","clearInterval","timerTimeLeft","timerTimeTaken","timeTaken","tickTimer","setInterval","newGame","preGameTime","timerPreGame","timerMessage","goHome","p","src","frameborder","allow","allowfullscreen","title","BasicTrainer","titleClass","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6a4119b4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class RadioGroup extends Component {\r\n\r\n    handleChange = (e) => {\r\n        this.props.handleChange(e)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.props.radios.map(r => {\r\n                return( <div key={r.id} className={this.props.radioClass}>\r\n                    <input  onChange={this.handleChange} type=\"radio\" name={this.props.name} value={r.id} id={r.id} checked={r.id === this.props.checked} disabled={this.props.disabled}></input>\r\n                    <label htmlFor={r.id}>{r.id}</label>\r\n                </div>)\r\n            })\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class CheckboxGroup extends Component {\r\n\r\n    handleChange = (event) => {\r\n        this.props.handleChange(event.target.value)\r\n     }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            {this.props.boxes.map(boxVal => {\r\n                return <div key={boxVal}>\r\n                    <input type=\"checkbox\" id={boxVal} name={boxVal} value={boxVal} onChange={this.handleChange} checked={this.props.checked.includes(boxVal)} disabled={!this.props.enabledList.includes(boxVal)}></input>\r\n                    <label htmlFor={boxVal}>{boxVal}</label>\r\n                </div>\r\n            })}\r\n            </div>\r\n        )\r\n    }\r\n}","const getRandom = function (array) {\r\n  const num = Math.floor(Math.random() * array.length);\r\n  return array[num];\r\n};\r\n\r\nclass BASE_RULES {\r\n  constructor() {\r\n    this.max = 10;\r\n    this.min = 1;\r\n    this.startTime = 10;\r\n    this.totalProblems = 50;\r\n    this.practice = false;\r\n    this.hasNumProbs = false;\r\n    this.hasStartClock = false;\r\n    this.allowedSigns = [\"+\", \"-\", \"×\", \"/\"];\r\n  }\r\n}\r\n\r\nclass GameMode {\r\n  constructor(params) {\r\n    Object.assign(this, params);\r\n    this.hasTimer = !this.practice;\r\n    this.bonus = 2;\r\n    this.ticks = true;\r\n    this.clockDirection = 1;\r\n    this.hasSkip = true;\r\n    this.challengeIncrease = 0;\r\n    this.max = Number(this.max);\r\n    this.min = Number(this.min);\r\n  }\r\n  compute(n1, n2, s) {\r\n    if (s === \"×\") return n1 * n2;\r\n    if (s === \"+\") return n1 + n2;\r\n    if (s === \"-\") return n1 - n2;\r\n    if (s === \"/\") return n1 / n2;\r\n  }\r\n\r\n  getRandomInt() {\r\n    // if(this.max == this.min) return Number(this.min)\r\n    // This returns 0 if min and max are the same...\r\n    return Math.floor(Math.random() * (this.max - this.min + 1) + this.min);\r\n  }\r\n\r\n  getNewProblem() {\r\n    let n1, n2;\r\n    const sign = getRandom(this.signs);\r\n    do {\r\n      [n1, n2] = this.getNewNumbers();\r\n    } while (sign === \"/\" && n2 === 0); // Avoid 0 in the denominator\r\n    return [n1, n2, sign];\r\n  }\r\n\r\n  getNewNumbers() {\r\n    return [this.getRandomInt(), this.getRandomInt()];\r\n  }\r\n  isFinished() {\r\n    return false;\r\n  }\r\n  increaseChallenge() {\r\n    this.max += this.challengeIncrease;\r\n  }\r\n\r\n  static newGame(options) {\r\n    switch (options.mode) {\r\n      case \"Normal\":\r\n        return new Normal(options);\r\n      case \"Blitz\":\r\n        return new Blitz(options);\r\n      case \"Zen\":\r\n        return new Zen(options);\r\n      case \"Multiplication Tables\":\r\n        return new MultiplicationTables(options);\r\n    }\r\n  }\r\n}\r\n\r\nclass Normal extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.challengeIncrease = 5;\r\n  }\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Normal\",\r\n      hasPractice: true,\r\n      description:\r\n        \"Every correct answer adds more time to the clock, but be careful! The problems get harder the longer you  last.\",\r\n      hasStartClock: true,\r\n    });\r\n  }\r\n}\r\n\r\nclass MultiplicationTables extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.initGame();\r\n    this.clockDirection = 1;\r\n    this.hasSkip = false;\r\n  }\r\n  initGame() {\r\n    this.table = [];\r\n    this.problem = 0;\r\n    for (let i = this.min; i <= this.max; i++) {\r\n      for (let j = this.min; j <= this.max; j++) {\r\n        this.table.push([i, j]);\r\n      }\r\n    }\r\n  }\r\n  getNewNumbers() {\r\n    let nums;\r\n    if (this.inOrder) {\r\n      nums = this.table[0];\r\n    } else {\r\n      nums = getRandom(this.table);\r\n    }\r\n    this.table = this.table.filter((tuples) => {\r\n      return tuples !== nums;\r\n    });\r\n    return nums;\r\n  }\r\n  isFinished() {\r\n    if (this.problem === this.table.length) {\r\n      this.initGame();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Multiplication Tables\",\r\n      ticks: true,\r\n      hasPractice: true,\r\n      description:\r\n        \"Like Normal mode, but let's you focus just on multiplication tables.\",\r\n      allowedSigns: [\"×\"],\r\n      hasStartClock: true,\r\n    });\r\n  }\r\n}\r\n\r\nclass Zen extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.hasTimer = false;\r\n  }\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Zen\",\r\n      description: \"Chill out with some music and endless math problems.\",\r\n    });\r\n  }\r\n}\r\n\r\nclass Blitz extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.clockDirection = -1;\r\n    this.startTime = 0;\r\n    this.bonus = 0;\r\n  }\r\n\r\n  // I don't like this being a method. I need to figure a way to keep the game logic separate from the game rules\r\n  isFinished(probNum) {\r\n    if (probNum == this.totalProblems) {\r\n      // total problems is stored as a string.\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Blitz\",\r\n      problemCount: true,\r\n      description: \"Solve a set number of problems as fast as you can!\",\r\n      hasNumProbs: true,\r\n    });\r\n  }\r\n}\r\n\r\nexport default GameMode;\r\nexport { Normal, MultiplicationTables, Blitz, Zen };\r\n","import React, { Component } from \"react\";\r\nimport RadioGroup from \"./RadioGroup\";\r\nimport CheckboxGroup from \"./CheckboxGroup\";\r\nimport * as Modes from \"./Modes\";\r\n\r\nimport \"./Options.css\";\r\n\r\nlet Rules = {};\r\n\r\nObject.keys(Modes).forEach((mode) => {\r\n  if (!!Modes[mode].getDefaultRules) {\r\n    // This stops the abstract GameMode class from being added to the list\r\n    let r = Modes[mode].getDefaultRules();\r\n    Rules[r.id] = r;\r\n  }\r\n});\r\n\r\nexport default class Options extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { mode: \"Normal\", signs: [\"+\", \"-\"], canStart: true };\r\n    Object.assign(this.state, Rules[\"Normal\"]);\r\n    this.radios = [...Object.values(Rules)];\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if(this.state.canStart) {\r\n    this.setState({ id: this.state.mode });\r\n    this.props.handleOptions(this.state);\r\n  }\r\n  };\r\n  handleChange = (event, value) => {\r\n    if (event.target.name === \"practice\") {\r\n      let practice = this.state.practice;\r\n      this.setState({ [event.target.name]: !practice });\r\n    } else {\r\n      this.setState({ [event.target.name]: event.target.value});\r\n      this.setState(state => { return {canStart: Number(state.min) <= Number(state.max) }})\r\n    }\r\n\r\n    if (event.target.value === \"Multiplication Tables\") {\r\n      this.setState({ signs: [\"×\"] });\r\n    }\r\n  };\r\n  handleCheckboxChange = (value) => {\r\n      let signs = this.state.signs;\r\n      if (signs.includes(value)) signs = signs.filter((s) => s !== value);\r\n      else signs.push(value);\r\n      this.setState({ signs });\r\n    \r\n  };\r\n\r\n  render() {\r\n    // This could have been ternary'd below, but it's already so cluttered, I wanted to put these all up here.\r\n    let practiceEnable = Rules[this.state.mode].hasPractice ? \"\" : \"disabled\";\r\n    let numProbsEnable = Rules[this.state.mode].hasNumProbs ? \"\" : \"disabled\";\r\n    let startClockEnable = Rules[this.state.mode].hasStartClock ? '' : 'disabled'\r\n    let chooseSignsEnable = Rules[this.state.mode].allowedSigns.length > 1 ? '': 'disabled'\r\n\r\n    let rangeWarning = this.state.min > this.state.max ? <span className=\"warning\">Min must not be higher than max.</span> : '';\r\n    let buttonClasses = \"button start-button \" + (!this.state.canStart ? 'disabled' : '');\r\n\r\n    return (\r\n      <div className=\"options\">\r\n        <form onSubmit={this.handleSubmit} className=\"options-form\">\r\n          <div className=\"mode-select\">\r\n            <RadioGroup\r\n              name=\"mode\"\r\n              radios={this.radios}\r\n              handleChange={this.handleChange}\r\n              checked={this.state.mode}\r\n              radioClass={\"mode\"}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mode-options\">\r\n            <div className=\"mode-info\">\r\n              <h1 className=\"mode-title\">{this.state.mode}</h1>\r\n              <div className=\"mode-desc-box\">\r\n              <p className=\"mode-desc\">{Rules[this.state.mode].description}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"mode-options-body\">\r\n            <div className=\"mode-options-col\">\r\n            <div className=\"mode-max-min\">\r\n              <div className=\"mode-max\">\r\n              <h2 id=\"range\" className={`form-area-label`}>Range {rangeWarning}</h2>\r\n               \r\n                <label htmlFor=\"max\">Max:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"max\"\r\n                  value={this.state.max}\r\n                  onChange={this.handleChange}\r\n                ></input> \r\n              </div>\r\n              <div className=\"mode-min\">\r\n                <label htmlFor=\"min\">Min:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"min\"\r\n                  value={this.state.min}\r\n                  onChange={this.handleChange}\r\n                ></input>\r\n              </div>\r\n            </div>\r\n            <div className=\"mode-signs\">\r\n              <h2 className={`${chooseSignsEnable} form-area-label`}>Choose Signs</h2>\r\n              <CheckboxGroup\r\n                boxes={[\"+\", \"-\", \"×\", \"/\"]}\r\n                checked={this.state.signs}\r\n                handleChange={this.handleCheckboxChange}\r\n                enabledList={Rules[this.state.mode].allowedSigns}\r\n              />\r\n            </div>\r\n            </div>\r\n            <div className=\"mode-options-col\">\r\n            <div>\r\n              <h2 className={`${numProbsEnable} form-area-label`}>Number of Problems</h2>\r\n              <input\r\n                type=\"number\"\r\n                name=\"totalProblems\"\r\n                value={this.state.totalProblems}\r\n                onChange={this.handleChange}\r\n                disabled={!Rules[this.state.mode].hasNumProbs}\r\n              ></input>\r\n            </div>\r\n\r\n            <div>\r\n              <h2 className={`${practiceEnable} form-area-label`}>Practice Mode</h2>\r\n              <RadioGroup\r\n                handleChange={this.handleChange}\r\n                name=\"practice\"\r\n                radios={[{ id: \"On\" }, { id: \"Off\" }]}\r\n                checked={this.state.practice === true ? \"On\" : \"Off\"}\r\n                disabled={!Rules[this.state.mode].hasPractice}\r\n              />\r\n            </div>\r\n            <div>\r\n              <h2 className={`${startClockEnable} form-area-label`}>Seconds on Clock</h2>\r\n              <input\r\n                type=\"number\"\r\n                value={this.state.startTime}\r\n                name=\"startTime\"\r\n                onChange={this.handleChange}\r\n                disabled={!Rules[this.state.mode].hasStartClock}\r\n              />\r\n            </div>\r\n            </div>\r\n            <input className={buttonClasses}type=\"submit\" value=\"Start\"></input>\r\n\r\n          </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport './Problem.css'\r\nexport default class Problem extends Component {\r\n\r\n  render() {\r\n    let {num1, num2, sign, mode} = this.props\r\n    return (\r\n      <div className={` ${mode} problem-wrap`}>\r\n      <div className={` problem`}>\r\n        <span>\r\n        {num1} {sign} {num2} = \r\n        </span>\r\n      </div>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react'\r\n\r\nimport './Input.css'\r\n\r\nexport default class Input extends Component {\r\n\r\n    handleInput = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleInput(event.target.value)\r\n    }\r\n    handleUpdateProblem = () => {\r\n        if(this.props.isGameOver) {\r\n            this.props.restart();\r\n        } else\r\n        this.props.updateProblem(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input\">\r\n            <input\r\n            className=\"answer\"\r\n              type=\"text\"\r\n              onChange={this.handleInput}\r\n              value={this.props.input}\r\n              autoFocus\r\n            ></input>\r\n            {this.props.hasSkip ? \r\n            <button className=\"skip-button button\" onClick={this.handleUpdateProblem}>{this.props.isGameOver ? 'restart': 'skip'}</button>\r\n            : null\r\n            }\r\n          </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nclass GameOverMessage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  handleRestart = () => {\r\n    this.props.restart();\r\n  };\r\n  render() {\r\n    let { solved, timeElapsed, goal } = this.props;\r\n    let message = solved >= goal ? \"Great Job!\" : \"Keep trying!\";\r\n\r\n    let timeMessage;\r\n    if (timeElapsed >= 60) {\r\n      let mins = Math.floor(timeElapsed / 60);\r\n      let secs = timeElapsed % 60;\r\n      timeMessage = `${mins} minute${mins > 1 ? \"s\" : \"\"}${\r\n        secs > 0 ? ` and ${secs} second${secs > 1 ? \"s\" : \"\"}` : \"\"\r\n      }`;\r\n    } else timeMessage = `${timeElapsed} seconds`;\r\n    return (\r\n      <div>\r\n        <h1>{`You solved ${solved} problems in ${timeMessage}!`}</h1>\r\n        <h2>{message}</h2>\r\n        <button className=\"button\" onClick={this.handleRestart}>Try again?</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameOverMessage;\r\n","import React, { Component } from \"react\";\r\nimport Problem from \"./Problem\";\r\nimport Input from \"./Input\";\r\nimport GameMode from \"./Modes\";\r\nimport GameOverMessage from \"./GameOverMessage\";\r\n\r\nimport \"./MathTrainer.css\";\r\nimport \"./Zen.css\";\r\n\r\nexport default class MathTrainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.Game = GameMode.newGame(this.props.options);\r\n    this.state = {\r\n      problem: { num1: 0, num2: 0, sign: \"\" },\r\n      input: \"\",\r\n      timeLeft:\r\n        this.Game.hasTimer || !this.Game.practice || this.Game.startTime,\r\n      isGameOver: true,\r\n      problems: [],\r\n      preGameTime: 3,\r\n    };\r\n  }\r\n\r\n  updateProblem = (wasSkipped) => {\r\n    let [num1, num2, sign] = this.Game.getNewProblem();\r\n    let answer;\r\n    if (sign === \"/\" && num1 !== 0) {\r\n      // Probably can clean this up.\r\n      // This has to be here (and not in the GameMode methods) because it overrides the generated problem.\r\n      let h = num1;\r\n      let num3 = num1 * num2;\r\n      answer = num2;\r\n      num1 = num3;\r\n      num2 = h;\r\n    } else {\r\n      answer = this.Game.compute(num1, num2, sign);\r\n    }\r\n    this.setState({\r\n      problem: { num1, num2, answer, sign },\r\n      input: \"\",\r\n    });\r\n    if (!wasSkipped) {\r\n      this.setState((s) => ({\r\n        timeLeft: s.timeLeft + this.Game.bonus,\r\n      }));\r\n    }\r\n  };\r\n\r\n  handleInput = (val) => {\r\n    let { num1, num2, sign, answer } = this.state.problem;\r\n    this.setState({ input: val });\r\n    if (this.state.problem.answer == val) {\r\n      this.setState(\r\n        {\r\n          problems: [\r\n            ...this.state.problems,\r\n            `${num1} ${sign} ${num2} = ${answer}`,\r\n          ],\r\n        },\r\n        () => {\r\n          if (!this.Game.isFinished(this.state.problems.length)) {\r\n            if (this.state.problems.length % 5 === 0) {\r\n              // I may want to abstract the threshold into the Mode classes.\r\n              this.Game.increaseChallenge();\r\n            }\r\n            this.updateProblem();\r\n          } else {\r\n            this.endGame();\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n  endGame = () => {\r\n    clearInterval(this.state.timerTimeLeft);\r\n    clearInterval(this.state.timerTimeTaken);\r\n    this.setState((s) => ({\r\n      isGameOver: true,\r\n      timeLeft: 0,\r\n      timeTaken: s.timeTaken + 1, // The timeLeft timer doesn't actually count all the way to 0, so this little addition gets the last second.\r\n    }));\r\n  };\r\n  tickTimer = () => {\r\n    // This feels pretty hacky to me, will probably want to clean up later.\r\n    if (this.state.timeLeft > 1) {\r\n      this.setState((s) => ({\r\n        timeLeft: s.timeLeft - 1,\r\n      }));\r\n    } else if (this.state.timeLeft === 1) {\r\n      this.endGame();\r\n    }\r\n  };\r\n\r\n  restart = () => {\r\n    this.updateProblem();\r\n    this.setState({ isGameOver: false, problems: [] });\r\n    if (this.Game.hasTimer) {\r\n      this.setState({\r\n        timeLeft: this.Game.startTime,\r\n        timeTaken: 0,\r\n        timerTimeLeft: setInterval(() => {\r\n          this.tickTimer();\r\n        }, 1000),\r\n        timerTimeTaken: setInterval(() => {\r\n          this.setState((s) => ({\r\n            timeTaken: s.timeTaken + 1,\r\n          }));\r\n        }, 1000),\r\n      });\r\n    }\r\n  };\r\n\r\n  handleOptions = () => {\r\n    this.props.handleRestart();\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Goes right into the Game if it's Zen, else starts the pregame timer\r\n    if(this.Game.mode === \"Zen\") {\r\n      this.restart();\r\n    } else {\r\n    this.setState({timerPreGame: setInterval(() => {\r\n      this.setState(s => ({preGameTime : s.preGameTime - 1}))\r\n      if(this.state.preGameTime < 1) {\r\n        this.restart();\r\n        clearInterval(this.state.timerPreGame)\r\n      }\r\n    }, 1000)})\r\n  }\r\n}\r\n  render() {\r\n    let timerMessage;\r\n    if(this.Game.mode !== 'Zen') {\r\n      timerMessage = !this.state.isGameOver ? (\r\n        <h2>\r\n          {!this.Game.hasTimer ||\r\n            this.state.timeLeft ||\r\n            this.state.timeTaken}\r\n        </h2>\r\n      ) : (\r\n        <GameOverMessage\r\n          solved={this.state.problems.length}\r\n          timeElapsed={this.state.timeTaken}\r\n          goal={3}\r\n          restart={this.restart}\r\n          goHome={this.handleOptions}\r\n        />\r\n      )\r\n    } else timerMessage = null\r\n    \r\n    let { num1, num2, sign, answer } = this.state.problem;\r\n    return (\r\n      <div className={`${this.Game.mode}`}>\r\n      {/* PreGame timer / game area */}\r\n      {this.Game.mode !== 'Zen' && \r\n      this.state.preGameTime > 0 ? \r\n      <h2 className=\"pre-timer\">{this.state.preGameTime}</h2> \r\n      : \r\n        <div className=\"game-area\">\r\n          {/* Problem List */}\r\n          {this.Game.mode === \"Zen\" ? (\r\n            <div className=\"problem-list\">\r\n              {this.state.problems.map((p, i) => {\r\n                return (\r\n                  <span className={`${this.Game.mode} problem`}>\r\n                    {p}\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n          ) : null}\r\n          {/* Timer / Message */}\r\n          {timerMessage}\r\n          {/* Problem & Input */}\r\n          {this.state.timeLeft > 0 || !this.state.isGameOver ? (\r\n            <Problem\r\n              mode={this.Game.mode}\r\n              num1={num1}\r\n              num2={num2}\r\n              answer={answer}\r\n              sign={sign}\r\n              probNum={this.state.problems.length + 1}\r\n            >\r\n              <Input\r\n                handleInput={this.handleInput}\r\n                updateProblem={this.updateProblem}\r\n                input={this.state.input}\r\n                restart={this.restart}\r\n                hasSkip={this.Game.hasSkip}\r\n                isGameOver={this.state.timeLeft === 0}\r\n              />\r\n            </Problem>\r\n          ) : null}\r\n\r\n          <button\r\n            className=\"button options-button\"\r\n            onClick={this.handleOptions}\r\n          >\r\n            Select a new mode\r\n          </button>\r\n        </div>\r\n      }\r\n        {/* Video */}\r\n        {this.Game.mode === \"Zen\" ? (\r\n          <iframe\r\n            className=\"video Zen\"\r\n            src=\"https://www.youtube.com/embed/5qap5aO4i9A?autoplay=1\"\r\n            frameborder=\"0\"\r\n            allow=\"autoplay; encrypted-media\"\r\n            allowfullscreen\r\n            title=\"video\"\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Options from \"./Options\";\r\nimport MathTrainer from \"./MathTrainer\";\r\n\r\nimport './StartPage.css'\r\n\r\nexport default class BasicTrainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isGameOver: true,\r\n      options: {},\r\n    };\r\n  }\r\n  handleOptions = (options) => {\r\n    this.setState({ isGameOver: false, options });\r\n  };\r\n  handleRestart =() => {\r\n    this.setState({isGameOver: true, options : {}})\r\n  }\r\n  render() {\r\n    const titleClass = (this.state.options.mode === 'Zen') ? 'title hidden' : 'title';\r\n    return (\r\n\r\n       <div>\r\n       <h1 className={titleClass}>Online Mental Math Trainer</h1>\r\n        {this.state.isGameOver ? (\r\n          <Options handleOptions={this.handleOptions} />\r\n        ) : (\r\n         <MathTrainer options={this.state.options} handleRestart={this.handleRestart} />\r\n        )}\r\n      </div> \r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport BasicTrainer from './Components/StartPage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <BasicTrainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}