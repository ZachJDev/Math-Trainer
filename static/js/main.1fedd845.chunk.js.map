{"version":3,"sources":["logo.svg","Components/Problem.js","Components/Input.js","Components/Modes.js","Components/GameOverMessage.js","Components/MathTrainer.js","Components/RadioGroup.js","Components/CheckboxGroup.js","Components/Options.js","Components/StartPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Problem","this","props","num1","num2","sign","mode","probNum","className","children","Component","Input","handleInput","event","preventDefault","target","value","handleUpdateProblem","isGameOver","restart","updateProblem","type","onChange","input","autoFocus","hasSkip","onClick","getRandom","array","Math","floor","random","length","BASE_RULES","max","min","startTime","totalProblems","practice","hasNumProbs","hasStartClock","allowedSigns","GameMode","params","Object","assign","hasTimer","bonus","ticks","clockDirection","challengeIncrease","Number","n1","n2","s","signs","getNewNumbers","console","log","getRandomInt","options","Normal","Blitz","Zen","MultiplicationTables","id","hasPractice","description","initGame","table","problem","i","j","push","nums","inOrder","filter","tuples","problemCount","GameOverMessage","handleRestart","state","timeMessage","solved","timeElapsed","message","goal","mins","secs","MathTrainer","wasSkipped","answer","Game","getNewProblem","h","compute","setState","timeLeft","val","problems","isFinished","endGame","increaseChallenge","clearInterval","timerTimeLeft","timerTimeTaken","timeTaken","tickTimer","setInterval","handleOptions","newGame","timerMessage","goHome","map","p","src","frameborder","allow","allowfullscreen","title","RadioGroup","handleChange","e","radios","r","radioClass","name","checked","disabled","for","CheckboxGroup","boxes","b","includes","enabledList","Rules","keys","Modes","forEach","getDefaultRules","Options","handleSubmit","handleCheckboxChange","values","practiceEnable","numProbsEnable","startClockEnable","chooseSignsEnable","onSubmit","htmlFor","BasicTrainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1fedd845.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nimport './Problem.css'\r\nexport default class Problem extends Component {\r\n\r\n  render() {\r\n    let {num1, num2, sign, probNum, mode} = this.props\r\n    return (\r\n      <div className={` ${mode} problem-wrap`}>\r\n      <div className={` problem`}>\r\n        <span>\r\n        {num1} {sign} {num2} = \r\n        </span>\r\n      </div>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react'\r\n\r\nimport './Input.css'\r\n\r\nexport default class Input extends Component {\r\n\r\n    handleInput = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleInput(event.target.value)\r\n    }\r\n    handleUpdateProblem = () => {\r\n        if(this.props.isGameOver) {\r\n            this.props.restart();\r\n        } else\r\n        this.props.updateProblem(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input\">\r\n            <input\r\n            className=\"answer\"\r\n              type=\"text\"\r\n              onChange={this.handleInput}\r\n              value={this.props.input}\r\n              autoFocus\r\n            ></input>\r\n            {this.props.hasSkip ? \r\n            <button className=\"skip-button button\" onClick={this.handleUpdateProblem}>{this.props.isGameOver ? 'restart': 'skip'}</button>\r\n            : null\r\n            }\r\n          </div>\r\n        )\r\n    }\r\n}","const getRandom = function (array) {\r\n  const num = Math.floor(Math.random() * array.length);\r\n  return array[num];\r\n};\r\n\r\nclass BASE_RULES {\r\n  constructor() {\r\n    this.max = 3;\r\n    this.min = 1;\r\n    this.startTime = 10;\r\n    this.totalProblems =5;\r\n    this.practice = false;\r\n    this.hasNumProbs = false;\r\n    this.hasStartClock = false;\r\n    this.allowedSigns = [ \"+\", \"-\", \"×\",\"/\"];\r\n  }\r\n}\r\n\r\nclass GameMode {\r\n  constructor(params) {\r\n    Object.assign(this, params);\r\n    this.hasTimer = !this.practice;\r\n    this.bonus = 2;\r\n    this.ticks = true;\r\n    this.clockDirection = 1\r\n    this.hasSkip = true;\r\n    this.challengeIncrease = 0;\r\n    this.max = Number(this.max)\r\n    this.min = Number(this.min)\r\n  }\r\n  compute(n1, n2, s) {\r\n    \r\n    if (s === \"×\") return n1 * n2;\r\n    if (s === \"+\") return n1 + n2;\r\n    if (s === \"-\") return n1 - n2;\r\n    if (s === \"/\") return n1 / n2;\r\n  }\r\n\r\n  getRandomInt() {\r\n    // if(this.max == this.min) return Number(this.min)\r\n    // This returns 0 if min and max are the same...\r\n    return Math.floor(Math.random() * (this.max - this.min + 1) + this.min);\r\n  }\r\n\r\n  getNewProblem() {\r\n    let n1, n2;\r\n    const sign = getRandom(this.signs);\r\n    do {\r\n      [n1, n2] = this.getNewNumbers();\r\n      console.log(n1, n2)\r\n    } while (sign === \"/\" && n2 === 0); // Avoid 0 in the denominator\r\n    return [n1, n2, sign];\r\n  }\r\n\r\n  getNewNumbers() {\r\n    return [this.getRandomInt(), this.getRandomInt()];\r\n  }\r\n   isFinished() {\r\n    return false;\r\n  }\r\n  increaseChallenge() {\r\n    this.max += this.challengeIncrease\r\n  }\r\n\r\n  static newGame(options) {\r\n    switch (options.mode) {\r\n      case \"Normal\":\r\n        return new Normal(options);\r\n      case \"Blitz\":\r\n        return new Blitz(options);\r\n      case \"Zen\":\r\n        return new Zen(options);\r\n      case \"Multiplication Tables\":\r\n        return new MultiplicationTables(options);\r\n    }\r\n  }\r\n}\r\n\r\nclass Normal extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.challengeIncrease = 5;\r\n    \r\n  }\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Normal\",\r\n      hasPractice: true,\r\n      description: \"Every correct answer adds more time to the clock, but be careful! The problems get harder the longer you  last.\",\r\n      hasStartClock: true\r\n    });\r\n  }\r\n}\r\n\r\nclass MultiplicationTables extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.initGame();\r\n    this.clockDirection = 1\r\n    this.hasSkip = false;\r\n  }\r\n  initGame() {\r\n    this.table = [];\r\n    this.problem = 0;\r\n    for (let i = this.min; i <= this.max; i++) {\r\n      for (let j = this.min; j <= this.max; j++) {\r\n        this.table.push([i, j]);\r\n      }\r\n    }\r\n  }\r\n  getNewNumbers() {\r\n    let nums;\r\n    if (this.inOrder) {\r\n      nums = this.table[0];\r\n    } else {\r\n      nums = getRandom(this.table);\r\n    }\r\n    this.table = this.table.filter((tuples) => {\r\n      return tuples !== nums;\r\n    });\r\n    return nums;\r\n  }\r\n  isFinished(){\r\n    if( this.problem ===this.table.length){\r\n      this.initGame();\r\n       return true;}\r\n    return false\r\n  }\r\n\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Multiplication Tables\",\r\n      ticks: true,\r\n      hasPractice: true,\r\n      description: \"Like Normal mode, but let's you focus just on multiplication tables.\",\r\n      allowedSigns: [\"×\"],\r\n      hasStartClock: true,\r\n    });\r\n  }\r\n}\r\n\r\nclass Zen extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.hasTimer = false;\r\n  }\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Zen\",\r\n      description: \"Chill out with some music and endless math problems.\"\r\n    });\r\n  }\r\n}\r\n\r\nclass Blitz extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.clockDirection = -1;\r\n    this.startTime = 0;\r\n    this.bonus = 0;\r\n  }\r\n\r\n  // I don't like this being a method. I need to figure a way to keep the game logic separate from the game rules\r\n  isFinished(probNum) {\r\n    console.log(this.totalProblems)\r\n    if (probNum == this.totalProblems) { // total problems is stored as a string.\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n   \r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Blitz\",\r\n      problemCount: true,\r\n      description: \"Solve a set number of problems as fast as you can!\",\r\n      hasNumProbs: true\r\n    });\r\n  }\r\n}\r\n\r\nexport default GameMode;\r\nexport { Normal, MultiplicationTables, Blitz, Zen };\r\n","import React, { Component } from \"react\";\r\n\r\nclass GameOverMessage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  handleRestart = () => {\r\n    this.props.restart();\r\n  };\r\n  render() {\r\n    let { solved, timeElapsed, goal } = this.props;\r\n    let message = solved >= goal ? \"Great Job!\" : \"Keep trying!\";\r\n\r\n    let timeMessage;\r\n    if (timeElapsed >= 60) {\r\n      let mins = Math.floor(timeElapsed / 60);\r\n      let secs = timeElapsed % 60;\r\n      timeMessage = `${mins} minute${mins > 1 ? \"s\" : \"\"}${\r\n        secs > 0 ? ` and ${secs} second${secs > 1 ? \"s\" : \"\"}` : \"\"\r\n      }`;\r\n    } else timeMessage = `${timeElapsed} seconds`;\r\n    return (\r\n      <div>\r\n        <h1>{`You solved ${solved} problems in ${timeMessage}!`}</h1>\r\n        <h2>{message}</h2>\r\n        <button className=\"button\" onClick={this.handleRestart}>Try again?</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameOverMessage;\r\n","import React, { Component } from \"react\";\r\nimport Problem from \"./Problem\";\r\nimport Input from \"./Input\";\r\nimport GameMode from \"./Modes\";\r\nimport GameOverMessage from \"./GameOverMessage\";\r\n\r\nimport \"./MathTrainer.css\";\r\nimport \"./Zen.css\";\r\n\r\nexport default class MathTrainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.Game = GameMode.newGame(this.props.options);\r\n    console.log(this.Game);\r\n    this.state = {\r\n      problem: { num1: 0, num2: 0, sign: \"\" },\r\n      input: \"\",\r\n      timeLeft:\r\n        this.Game.hasTimer || !this.Game.practice || this.Game.startTime,\r\n      isGameOver: true,\r\n      problems: [],\r\n    };\r\n  }\r\n\r\n  updateProblem = (wasSkipped) => {\r\n    let [num1, num2, sign] = this.Game.getNewProblem();\r\n    let answer;\r\n    if (sign === \"/\" && num1 !== 0) {\r\n      // Probably can clean this up.\r\n      // This has to be here (and not in the GameMode methods) because it overrides the generated problem.\r\n      let h = num1;\r\n      let num3 = num1 * num2;\r\n      answer = num2;\r\n      num1 = num3;\r\n      num2 = h;\r\n    } else {\r\n      answer = this.Game.compute(num1, num2, sign);\r\n    }\r\n    this.setState({\r\n      problem: { num1, num2, answer, sign },\r\n      input: \"\",\r\n    });\r\n    if (!wasSkipped) {\r\n      this.setState((s) => ({\r\n        timeLeft: s.timeLeft + this.Game.bonus,\r\n      }));\r\n    }\r\n  };\r\n\r\n  handleInput = (val) => {\r\n    let { num1, num2, sign, answer } = this.state.problem;\r\n    this.setState({ input: val });\r\n    if (this.state.problem.answer == val) {\r\n      this.setState(\r\n        {\r\n          problems: [\r\n            ...this.state.problems,\r\n            `${num1} ${sign} ${num2} = ${answer}`,\r\n          ],\r\n        },\r\n        () => {\r\n          if (!this.Game.isFinished(this.state.problems.length)) {\r\n            if (this.state.problems.length % 5 === 0) {\r\n              // I may want to abstract the threshold into the Mode classes.\r\n              this.Game.increaseChallenge();\r\n            }\r\n            this.updateProblem();\r\n          } else {\r\n            this.endGame();\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n  endGame = () => {\r\n    clearInterval(this.state.timerTimeLeft);\r\n    clearInterval(this.state.timerTimeTaken);\r\n    this.setState((s) => ({\r\n      isGameOver: true,\r\n      timeLeft: 0,\r\n      timeTaken: s.timeTaken + 1, // The timeLeft timer doesn't actually count all the way to 0, so this little addition gets the last second.\r\n    }));\r\n  };\r\n  tickTimer = () => {\r\n    // This feels pretty hacky to me, will probably want to clean up later.\r\n    if (this.state.timeLeft > 1) {\r\n      this.setState((s) => ({\r\n        timeLeft: s.timeLeft - 1,\r\n      }));\r\n    } else if (this.state.timeLeft === 1) {\r\n      this.endGame();\r\n    }\r\n  };\r\n\r\n  restart = () => {\r\n    this.updateProblem();\r\n    this.setState({ isGameOver: false, problems: [] });\r\n    if (this.Game.hasTimer) {\r\n      this.setState({\r\n        timeLeft: this.Game.startTime,\r\n        timeTaken: 0,\r\n        timerTimeLeft: setInterval(() => {\r\n          this.tickTimer();\r\n        }, 1000),\r\n        timerTimeTaken: setInterval(() => {\r\n          this.setState((s) => ({\r\n            timeTaken: s.timeTaken + 1,\r\n          }));\r\n        }, 1000),\r\n      });\r\n    }\r\n  };\r\n\r\n  handleOptions = () => {\r\n    this.props.handleRestart();\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.restart();\r\n  }\r\n  render() {\r\n    let timerMessage;\r\n    if(this.Game.mode !== 'Zen') {\r\n      timerMessage = !this.state.isGameOver ? (\r\n        <h2>\r\n          {!this.Game.hasTimer ||\r\n            this.state.timeLeft ||\r\n            this.state.timeTaken}\r\n        </h2>\r\n      ) : (\r\n        <GameOverMessage\r\n          solved={this.state.problems.length}\r\n          timeElapsed={this.state.timeTaken}\r\n          goal={3}\r\n          restart={this.restart}\r\n          goHome={this.handleOptions}\r\n        />\r\n      )\r\n    } else timerMessage = null\r\n    \r\n    let { num1, num2, sign, answer } = this.state.problem;\r\n    return (\r\n      <div className={`${this.Game.mode}`}>\r\n        <div className=\"game-area\">\r\n          {/* Problem List */}\r\n          {this.Game.mode === \"Zen\" ? (\r\n            <div className=\"problem-list\">\r\n              {this.state.problems.map((p, i) => {\r\n                return (\r\n                  <span className={`${this.Game.mode} problem`}>\r\n                    {p}\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n          ) : null}\r\n          {/* Timer / Message */}\r\n          {timerMessage}\r\n          {/* Problem & Input */}\r\n          {this.state.timeLeft > 0 || !this.state.isGameOver ? (\r\n            <Problem\r\n              mode={this.Game.mode}\r\n              num1={num1}\r\n              num2={num2}\r\n              answer={answer}\r\n              sign={sign}\r\n              probNum={this.state.problems.length + 1}\r\n            >\r\n              <Input\r\n                handleInput={this.handleInput}\r\n                updateProblem={this.updateProblem}\r\n                input={this.state.input}\r\n                restart={this.restart}\r\n                hasSkip={this.Game.hasSkip}\r\n                isGameOver={this.state.timeLeft === 0}\r\n              />\r\n            </Problem>\r\n          ) : null}\r\n\r\n          <button\r\n            className=\"button options-button\"\r\n            onClick={this.handleOptions}\r\n          >\r\n            Start new Game\r\n          </button>\r\n        </div>\r\n        {/* Video */}\r\n        {this.Game.mode == \"Zen\" ? (\r\n          <iframe\r\n            className=\"video Zen\"\r\n            src=\"https://www.youtube.com/embed/5qap5aO4i9A?autoplay=1\"\r\n            frameborder=\"0\"\r\n            allow=\"autoplay; encrypted-media\"\r\n            allowfullscreen\r\n            title=\"video\"\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport default class RadioGroup extends Component {\r\n\r\n    handleChange = (e) => {\r\n        this.props.handleChange(e)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.props.radios.map(r => {\r\n                return( <div className={this.props.radioClass}>\r\n                    <input  onChange={this.handleChange} type=\"radio\" name={this.props.name} value={r.id} id={r.id} checked={r.id === this.props.checked} disabled={this.props.disabled}></input>\r\n                    <label for={r.id}>{r.id}</label>\r\n                </div>)\r\n            })\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class CheckboxGroup extends Component {\r\n\r\n    handleChange = (event) => {\r\n        this.props.handleChange(event.target.value)\r\n     }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            {this.props.boxes.map(b => {\r\n                return <div>\r\n                    <input type=\"checkbox\" id={b} name={b} value={b} onChange={this.handleChange} checked={this.props.checked.includes(b)} disabled={!this.props.enabledList.includes(b)}></input>\r\n                    <label for={b}>{b}</label>\r\n                </div>\r\n            })}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport RadioGroup from \"./RadioGroup\";\r\nimport CheckboxGroup from \"./CheckboxGroup\";\r\nimport * as Modes from \"./Modes\";\r\n\r\nimport \"./Options.css\";\r\n\r\nlet Rules = {};\r\n\r\nObject.keys(Modes).forEach((mode) => {\r\n  if (!!Modes[mode].getDefaultRules) {\r\n    // This stops the abstract GameMode class from being added to the list\r\n    let r = Modes[mode].getDefaultRules();\r\n    Rules[r.id] = r;\r\n  }\r\n});\r\n\r\nexport default class Options extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { mode: \"Normal\", signs: [\"+\", \"-\"] };\r\n    Object.assign(this.state, Rules[\"Normal\"]);\r\n    this.radios = [...Object.values(Rules)];\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.setState({ id: this.state.mode });\r\n    this.props.handleOptions(this.state);\r\n  };\r\n  handleChange = (event, value) => {\r\n    if (event.target.name === \"practice\") {\r\n      let practice = this.state.practice;\r\n      this.setState({ [event.target.name]: !practice });\r\n    } else {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    if (event.target.value === \"Multiplication Tables\") {\r\n      this.setState({ signs: [\"×\"] });\r\n    }\r\n  };\r\n  handleCheckboxChange = (value) => {\r\n      let signs = this.state.signs;\r\n      if (signs.includes(value)) signs = signs.filter((s) => s !== value);\r\n      else signs.push(value);\r\n      this.setState({ signs });\r\n    \r\n  };\r\n\r\n  render() {\r\n    // This could have been ternary'd below, but it's already so cluttered, I wanted to put these all up here.\r\n    let practiceEnable = Rules[this.state.mode].hasPractice ? \"\" : \"disabled\";\r\n    let numProbsEnable = Rules[this.state.mode].hasNumProbs ? \"\" : \"disabled\";\r\n    let startClockEnable = Rules[this.state.mode].hasStartClock ? '' : 'disabled'\r\n    let chooseSignsEnable = Rules[this.state.mode].allowedSigns.length > 1 ? '': 'disabled'\r\n\r\n    return (\r\n      <div className=\"options\">\r\n        <form onSubmit={this.handleSubmit} className=\"options-form\">\r\n          <div className=\"mode-select\">\r\n            <RadioGroup\r\n              name=\"mode\"\r\n              radios={this.radios}\r\n              handleChange={this.handleChange}\r\n              checked={this.state.mode}\r\n              radioClass={\"mode\"}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mode-options\">\r\n            <div className=\"mode-info\">\r\n              <h1 className=\"mode-title\">{this.state.mode}</h1>\r\n              <div className=\"mode-desc-box\">\r\n              <p className=\"mode-desc\">{Rules[this.state.mode].description}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"mode-options-body\">\r\n            <div className=\"mode-options-col\">\r\n            <div className=\"mode-max-min\">\r\n              <div className=\"mode-max\">\r\n              <h2 className={`form-area-label`}>Range</h2>\r\n                <label htmlFor=\"max\">Max:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"max\"\r\n                  value={this.state.max}\r\n                  onChange={this.handleChange}\r\n                ></input>\r\n              </div>\r\n              <div className=\"mode-min\">\r\n                <label htmlFor=\"min\">Min:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"min\"\r\n                  value={this.state.min}\r\n                  onChange={this.handleChange}\r\n                ></input>\r\n              </div>\r\n            </div>\r\n            <div className=\"mode-signs\">\r\n              <h2 className={`${chooseSignsEnable} form-area-label`}>Choose Signs</h2>\r\n              <CheckboxGroup\r\n                boxes={[\"+\", \"-\", \"×\", \"/\"]}\r\n                checked={this.state.signs}\r\n                handleChange={this.handleCheckboxChange}\r\n                enabledList={Rules[this.state.mode].allowedSigns}\r\n              />\r\n            </div>\r\n            </div>\r\n            <div className=\"mode-options-col\">\r\n            <div>\r\n              <h2 className={`${numProbsEnable} form-area-label`}>Number of Problems</h2>\r\n              <input\r\n                type=\"number\"\r\n                name=\"totalProblems\"\r\n                value={this.state.totalProblems}\r\n                onChange={this.handleChange}\r\n                disabled={!Rules[this.state.mode].hasNumProbs}\r\n              ></input>\r\n            </div>\r\n\r\n            <div>\r\n              <h2 className={`${practiceEnable} form-area-label`}>Practice Mode</h2>\r\n              <RadioGroup\r\n                handleChange={this.handleChange}\r\n                name=\"practice\"\r\n                radios={[{ id: \"On\" }, { id: \"Off\" }]}\r\n                checked={this.state.practice === true ? \"On\" : \"Off\"}\r\n                disabled={!Rules[this.state.mode].hasPractice}\r\n              />\r\n            </div>\r\n            <div>\r\n              <h2 className={`${startClockEnable} form-area-label`}>Seconds on Clock</h2>\r\n              <input\r\n                type=\"number\"\r\n                value={this.state.startTime}\r\n                name=\"startTime\"\r\n                onChange={this.handleChange}\r\n                disabled={!Rules[this.state.mode].hasStartClock}\r\n              />\r\n            </div>\r\n            </div>\r\n            <input className=\"button start-button\" type=\"submit\" value=\"Start\"></input>\r\n\r\n          </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Options from \"./Options\";\r\nimport MathTrainer from \"./MathTrainer\";\r\n\r\nimport './StartPage.css'\r\n\r\nexport default class BasicTrainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isGameOver: true,\r\n      options: {},\r\n    };\r\n  }\r\n  handleOptions = (options) => {\r\n    this.setState({ isGameOver: false, options });\r\n  };\r\n  handleRestart =() => {\r\n    this.setState({isGameOver: true})\r\n  }\r\n  render() {\r\n    return (\r\n\r\n       <div>\r\n        {this.state.isGameOver ? (\r\n          <Options handleOptions={this.handleOptions} />\r\n        ) : (\r\n         <MathTrainer options={this.state.options} handleRestart={this.handleRestart} />\r\n        )}\r\n      </div> \r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MathTrainer from './Components/MathTrainer'\nimport BasicTrainer from './Components/StartPage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <BasicTrainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}