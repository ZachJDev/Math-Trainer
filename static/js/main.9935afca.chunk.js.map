{"version":3,"sources":["Components/RadioGroup.js","Components/CheckboxGroup.js","Components/Modes.js","Components/Options.js","Components/GameOverMessage.js","Components/Problem.js","Components/ProblemList.js","Components/Input.js","Components/Timer.js","Components/GameArea.js","Components/Video.js","Components/MathTrainer.js","Components/StartPage.js","App.js","serviceWorker.js","index.js"],"names":["RadioGroup","handleChange","e","props","this","radios","map","r","key","id","className","radioClass","onChange","type","name","value","checked","disabled","htmlFor","Component","CheckboxGroup","event","target","boxes","boxVal","includes","enabledList","getRandom","array","Math","floor","random","length","BASE_RULES","max","min","startTime","totalProblems","practice","hasNumProbs","hasStartClock","allowedSigns","GameMode","params","Object","assign","hasTimer","bonus","ticks","clockDirection","hasSkip","challengeIncrease","Number","n1","n2","s","sign","signs","getNewNumbers","getRandomInt","options","mode","Normal","Blitz","Zen","MultiplicationTables","hasPractice","description","initGame","table","problem","i","j","push","nums","inOrder","filter","tuples","probNum","problemCount","Rules","keys","Modes","forEach","getDefaultRules","Options","handleSubmit","preventDefault","state","canStart","setState","handleOptions","handleCheckboxChange","values","practiceEnable","numProbsEnable","startClockEnable","chooseSignsEnable","rangeWarning","buttonClasses","onSubmit","GameOverMessage","handleRestart","restart","timeMessage","solved","timeElapsed","message","goal","mins","secs","onClick","Problem","num1","num2","children","ProblemList","problems","p","Input","handleInput","handleUpdateProblem","isGameOver","updateProblem","input","autoFocus","Timer","time","GameArea","val","goToOptions","timerMessage","answer","timeLeft","timeTaken","goHome","Video","src","url","frameBorder","allow","allowFullScreen","title","MathTrainer","wasSkipped","Game","getNewProblem","h","compute","isFinished","endGame","increaseChallenge","clearInterval","timerTimeLeft","timerTimeTaken","tickTimer","setInterval","history","location","newGame","preGameTime","timerPreGame","BasicTrainer","Fragment","path","exact","render","routeProps","to","App","routerProps","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9935afca.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class RadioGroup extends Component {\r\n\r\n    handleChange = (e) => {\r\n        this.props.handleChange(e)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.props.radios.map(r => {\r\n                return( <div key={r.id} className={this.props.radioClass}>\r\n                    <input  onChange={this.handleChange} type=\"radio\" name={this.props.name} value={r.id} id={r.id} checked={r.id === this.props.checked} disabled={this.props.disabled}></input>\r\n                    <label htmlFor={r.id}>{r.id}</label>\r\n                </div>)\r\n            })\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class CheckboxGroup extends Component {\r\n\r\n    handleChange = (event) => {\r\n        this.props.handleChange(event.target.value)\r\n     }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            {this.props.boxes.map(boxVal => {\r\n                return <div key={boxVal}>\r\n                    <input type=\"checkbox\" id={boxVal} name={boxVal} value={boxVal} onChange={this.handleChange} checked={this.props.checked.includes(boxVal)} disabled={!this.props.enabledList.includes(boxVal)}></input>\r\n                    <label htmlFor={boxVal}>{boxVal}</label>\r\n                </div>\r\n            })}\r\n            </div>\r\n        )\r\n    }\r\n}","const getRandom = function (array) {\r\n  const num = Math.floor(Math.random() * array.length);\r\n  return array[num];\r\n};\r\n\r\nclass BASE_RULES {\r\n  constructor() {\r\n    this.max = 10;\r\n    this.min = 1;\r\n    this.startTime = 10;\r\n    this.totalProblems = 50;\r\n    this.practice = false;\r\n    this.hasNumProbs = false;\r\n    this.hasStartClock = false;\r\n    this.allowedSigns = [\"+\", \"-\", \"×\", \"/\"];\r\n  }\r\n}\r\n\r\nclass GameMode {\r\n  constructor(params) {\r\n    Object.assign(this, params);\r\n    this.hasTimer = !this.practice;\r\n    this.bonus = 2;\r\n    this.ticks = true;\r\n    this.clockDirection = 1;\r\n    this.hasSkip = true;\r\n    this.challengeIncrease = 0;\r\n    this.max = Number(this.max);\r\n    this.min = Number(this.min);\r\n  }\r\n  compute(n1, n2, s) {\r\n    if (s === \"×\") return n1 * n2;\r\n    if (s === \"+\") return n1 + n2;\r\n    if (s === \"-\") return n1 - n2;\r\n    if (s === \"/\") return n1 / n2;\r\n  }\r\n\r\n  getRandomInt() {\r\n    // if(this.max == this.min) return Number(this.min)\r\n    // This returns 0 if min and max are the same...\r\n    return Math.floor(Math.random() * (this.max - this.min + 1) + this.min);\r\n  }\r\n\r\n  getNewProblem() {\r\n    let n1, n2;\r\n    const sign = getRandom(this.signs);\r\n    do {\r\n      [n1, n2] = this.getNewNumbers();\r\n    } while (sign === \"/\" && n2 === 0); // Avoid 0 in the denominator\r\n    return [n1, n2, sign];\r\n  }\r\n\r\n  getNewNumbers() {\r\n    return [this.getRandomInt(), this.getRandomInt()];\r\n  }\r\n  isFinished() {\r\n    return false;\r\n  }\r\n  increaseChallenge() {\r\n    this.max += this.challengeIncrease;\r\n  }\r\n\r\n  static newGame(options) {\r\n    switch (options.mode) {\r\n      case \"Normal\":\r\n        return new Normal(options);\r\n      case \"Blitz\":\r\n        return new Blitz(options);\r\n      case \"Zen\":\r\n        return new Zen(options);\r\n      case \"Multiplication Tables\":\r\n        return new MultiplicationTables(options);\r\n      default: return new Normal(options)\r\n    }\r\n  }\r\n}\r\n\r\nclass Normal extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.challengeIncrease = 5;\r\n  }\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Normal\",\r\n      hasPractice: true,\r\n      description:\r\n        \"Every correct answer adds more time to the clock, but be careful! The problems get harder the longer you  last.\",\r\n      hasStartClock: true,\r\n    });\r\n  }\r\n}\r\n\r\nclass MultiplicationTables extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.initGame();\r\n    this.clockDirection = 1;\r\n    this.hasSkip = false;\r\n  }\r\n  initGame() {\r\n    this.table = [];\r\n    this.problem = 0;\r\n    for (let i = this.min; i <= this.max; i++) {\r\n      for (let j = this.min; j <= this.max; j++) {\r\n        this.table.push([i, j]);\r\n      }\r\n    }\r\n  }\r\n  getNewNumbers() {\r\n    let nums;\r\n    if (this.inOrder) {\r\n      nums = this.table[0];\r\n    } else {\r\n      nums = getRandom(this.table);\r\n    }\r\n    this.table = this.table.filter((tuples) => {\r\n      return tuples !== nums;\r\n    });\r\n    return nums;\r\n  }\r\n  isFinished() {\r\n    if (this.problem === this.table.length) {\r\n      this.initGame();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Multiplication Tables\",\r\n      ticks: true,\r\n      hasPractice: true,\r\n      description:\r\n        \"Like Normal mode, but let's you focus just on multiplication tables.\",\r\n      allowedSigns: [\"×\"],\r\n      hasStartClock: true,\r\n    });\r\n  }\r\n}\r\n\r\nclass Zen extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.hasTimer = false;\r\n  }\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Zen\",\r\n      description: \"Chill out with some music and endless math problems.\",\r\n    });\r\n  }\r\n}\r\n\r\nclass Blitz extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.clockDirection = -1;\r\n    this.startTime = 0;\r\n    this.bonus = 0;\r\n  }\r\n\r\n  // I don't like this being a method. I need to figure a way to keep the game logic separate from the game rules\r\n  isFinished(probNum) {\r\n    // eslint-disable-next-line eqeqeq\r\n    if (probNum == this.totalProblems) {\r\n      // total problems is stored as a string.\r\n      // Thank you past me.\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Blitz\",\r\n      problemCount: true,\r\n      description: \"Solve a set number of problems as fast as you can!\",\r\n      hasNumProbs: true,\r\n    });\r\n  }\r\n}\r\n\r\nexport default GameMode;\r\nexport { Normal, MultiplicationTables, Blitz, Zen };\r\n","import React, { Component } from \"react\";\r\nimport RadioGroup from \"./RadioGroup\";\r\nimport CheckboxGroup from \"./CheckboxGroup\";\r\nimport * as Modes from \"./Modes\";\r\n\r\nimport \"./Options.css\";\r\n\r\nlet Rules = {};\r\n\r\nObject.keys(Modes).forEach((mode) => {\r\n  if (!!Modes[mode].getDefaultRules) {\r\n    // This stops the abstract GameMode class from being added to the list\r\n    let r = Modes[mode].getDefaultRules();\r\n    Rules[r.id] = r;\r\n  }\r\n});\r\n\r\nexport default class Options extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { mode: \"Normal\", signs: [\"+\", \"-\"], canStart: true };\r\n    Object.assign(this.state, Rules[\"Normal\"]);\r\n    this.radios = [...Object.values(Rules)];\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if(this.state.canStart) {\r\n    this.setState({ id: this.state.mode });\r\n    this.props.handleOptions(this.state);\r\n  }\r\n  };\r\n  handleChange = (event, value) => {\r\n    if (event.target.name === \"practice\") {\r\n      let practice = this.state.practice;\r\n      this.setState({ [event.target.name]: !practice });\r\n    } else {\r\n      this.setState({ [event.target.name]: event.target.value});\r\n      this.setState(state => { return {canStart: Number(state.min) <= Number(state.max) }})\r\n    }\r\n\r\n    if (event.target.value === \"Multiplication Tables\") {\r\n      this.setState({ signs: [\"×\"] });\r\n    }\r\n  };\r\n  handleCheckboxChange = (value) => {\r\n      let signs = this.state.signs;\r\n      if (signs.includes(value)) signs = signs.filter((s) => s !== value);\r\n      else signs.push(value);\r\n      this.setState({ signs });\r\n    \r\n  };\r\n\r\n  render() {\r\n    // This could have been ternary'd below, but it's already so cluttered, I wanted to put these all up here.\r\n    let practiceEnable = Rules[this.state.mode].hasPractice ? \"\" : \"disabled\";\r\n    let numProbsEnable = Rules[this.state.mode].hasNumProbs ? \"\" : \"disabled\";\r\n    let startClockEnable = Rules[this.state.mode].hasStartClock ? '' : 'disabled'\r\n    let chooseSignsEnable = Rules[this.state.mode].allowedSigns.length > 1 ? '': 'disabled'\r\n\r\n    let rangeWarning = this.state.min > this.state.max ? <span className=\"warning\">Min must not be higher than max.</span> : '';\r\n    let buttonClasses = \"button start-button \" + (!this.state.canStart ? 'disabled' : '');\r\n\r\n    return (\r\n      <div className=\"options\">\r\n        <form onSubmit={this.handleSubmit} className=\"options-form\">\r\n          <div className=\"mode-select\">\r\n            <RadioGroup\r\n              name=\"mode\"\r\n              radios={this.radios}\r\n              handleChange={this.handleChange}\r\n              checked={this.state.mode}\r\n              radioClass={\"mode\"}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mode-options\">\r\n            <div className=\"mode-info\">\r\n              <h1 className=\"mode-title\">{this.state.mode}</h1>\r\n              <div className=\"mode-desc-box\">\r\n              <p className=\"mode-desc\">{Rules[this.state.mode].description}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"mode-options-body\">\r\n            <div className=\"mode-options-col\">\r\n            <div className=\"mode-max-min\">\r\n              <div className=\"mode-max\">\r\n              <h2 id=\"range\" className={`form-area-label`}>Range {rangeWarning}</h2>\r\n               \r\n                <label htmlFor=\"max\">Max:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"max\"\r\n                  value={this.state.max}\r\n                  onChange={this.handleChange}\r\n                ></input> \r\n              </div>\r\n              <div className=\"mode-min\">\r\n                <label htmlFor=\"min\">Min:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"min\"\r\n                  value={this.state.min}\r\n                  onChange={this.handleChange}\r\n                ></input>\r\n              </div>\r\n            </div>\r\n            <div className=\"mode-signs\">\r\n              <h2 className={`${chooseSignsEnable} form-area-label`}>Choose Signs</h2>\r\n              <CheckboxGroup\r\n                boxes={[\"+\", \"-\", \"×\", \"/\"]}\r\n                checked={this.state.signs}\r\n                handleChange={this.handleCheckboxChange}\r\n                enabledList={Rules[this.state.mode].allowedSigns}\r\n              />\r\n            </div>\r\n            </div>\r\n            <div className=\"mode-options-col\">\r\n            <div>\r\n              <h2 className={`${numProbsEnable} form-area-label`}>Number of Problems</h2>\r\n              <input\r\n                type=\"number\"\r\n                name=\"totalProblems\"\r\n                value={this.state.totalProblems}\r\n                onChange={this.handleChange}\r\n                disabled={!Rules[this.state.mode].hasNumProbs}\r\n              ></input>\r\n            </div>\r\n\r\n            <div>\r\n              <h2 className={`${practiceEnable} form-area-label`}>Practice Mode</h2>\r\n              <RadioGroup\r\n                handleChange={this.handleChange}\r\n                name=\"practice\"\r\n                radios={[{ id: \"On\" }, { id: \"Off\" }]}\r\n                checked={this.state.practice === true ? \"On\" : \"Off\"}\r\n                disabled={!Rules[this.state.mode].hasPractice}\r\n              />\r\n            </div>\r\n            <div>\r\n              <h2 className={`${startClockEnable} form-area-label`}>Seconds on Clock</h2>\r\n              <input\r\n                type=\"number\"\r\n                value={this.state.startTime}\r\n                name=\"startTime\"\r\n                onChange={this.handleChange}\r\n                disabled={!Rules[this.state.mode].hasStartClock}\r\n              />\r\n            </div>\r\n            </div>\r\n            <input className={buttonClasses}type=\"submit\" value=\"Start\"></input>\r\n\r\n          </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass GameOverMessage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  handleRestart = () => {\r\n    this.props.restart();\r\n  };\r\n  render() {\r\n    let { solved, timeElapsed, goal } = this.props;\r\n    let message = solved >= goal ? \"Great Job!\" : \"Keep trying!\";\r\n\r\n    let timeMessage;\r\n    if (timeElapsed >= 60) {\r\n      let mins = Math.floor(timeElapsed / 60);\r\n      let secs = timeElapsed % 60;\r\n      timeMessage = `${mins} minute${mins > 1 ? \"s\" : \"\"}${\r\n        secs > 0 ? ` and ${secs} second${secs > 1 ? \"s\" : \"\"}` : \"\"\r\n      }`;\r\n    } else timeMessage = `${timeElapsed} seconds`;\r\n    return (\r\n      <div>\r\n        <h1>{`You solved ${solved} problems in ${timeMessage}!`}</h1>\r\n        <h2>{message}</h2>\r\n        <button className=\"button\" onClick={this.handleRestart}>Try again?</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameOverMessage;\r\n","import React, { Component } from \"react\";\r\n\r\nimport './Problem.css'\r\nexport default class Problem extends Component {\r\n\r\n  render() {\r\n    let {num1, num2, sign, mode} = this.props\r\n    return (\r\n      <div className={` ${mode} problem-wrap`}>\r\n      <div className={` problem`}>\r\n        <span>\r\n        {num1} {sign} {num2} = \r\n        </span>\r\n      </div>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ProblemList extends Component {\r\n    render() {\r\n        return (\r\n                <div className=\"problem-list\">\r\n              {this.props.problems.map((p, i) => {\r\n                return (\r\n                    // I know indexes aren't great for keys, but I think in this case, where the list won't change, it's probably not a problem.\r\n                    //(Famous last words...)\r\n                  <span className={`${this.props.mode} problem`} key={i}>\r\n                    {p}\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\n\r\nimport './Input.css'\r\n\r\nexport default class Input extends Component {\r\n\r\n    handleInput = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleInput(event.target.value)\r\n    }\r\n    handleUpdateProblem = () => {\r\n        if(this.props.isGameOver) {\r\n            this.props.handleRestart();\r\n        } else\r\n        this.props.updateProblem(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input\">\r\n            <input\r\n            className=\"answer\"\r\n              type=\"text\"\r\n              onChange={this.handleInput}\r\n              value={this.props.input}\r\n              autoFocus\r\n            ></input>\r\n            {this.props.hasSkip ? \r\n            <button className=\"skip-button button\" onClick={this.handleUpdateProblem}>{this.props.isGameOver ? 'restart': 'skip'}</button>\r\n            : null\r\n            }\r\n          </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\n\r\nexport default class Timer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                 <h2>\r\n          {this.props.time}\r\n        </h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport GameOverMessage from './GameOverMessage'\r\nimport Problem from './Problem'\r\nimport ProblemList from './ProblemList'\r\nimport Input from './Input'\r\nimport Timer from './Timer'\r\n\r\nexport default class GameArea extends Component {\r\n    handleInput = (val) => {\r\n        this.props.handleInput(val)\r\n    }\r\n    updateProblem =() => {\r\n        this.props.updateProblem(true)\r\n    }\r\n    handleRestart = () => {\r\n        this.props.restart()\r\n    }\r\n\r\n    goToOptions = () => {\r\n        this.props.handleOptions()\r\n    }\r\n    render() {\r\n        const {num1, num2, answer, sign} = this.props.problem\r\n        const {input, mode, isGameOver, timeLeft, timeTaken, problems, hasSkip, practice} = this.props\r\n    let timerMessage;\r\n    // I'm not a fan of this nested statement... \r\n    if(mode !== 'Zen' && !practice) {\r\n      timerMessage = !isGameOver ? (\r\n       <Timer time={timeLeft || timeTaken || 0}/>\r\n      ) : (\r\n        <GameOverMessage\r\n          solved={problems.length}\r\n          timeElapsed={timeTaken}\r\n          goal={3}\r\n          restart={this.handleRestart}\r\n          goHome={this.handleOptions}\r\n        />\r\n      )\r\n    } else timerMessage = null\r\n        return (\r\n             <div className=\"game-area\">\r\n            {/* Problem List */}\r\n            {mode === \"Zen\" ?  <ProblemList mode ={mode} problems={problems}/>\r\n             : null}\r\n            {/* Timer / Message */}\r\n            {timerMessage}\r\n            {/* Problem & Input */}\r\n            {timeLeft > 0 || !isGameOver ? (\r\n              <Problem\r\n                mode={mode}\r\n                num1={num1}\r\n                num2={num2}\r\n                answer={answer}\r\n                sign={sign}\r\n                probNum={problems.length + 1}\r\n              >\r\n                <Input\r\n                  handleInput={this.handleInput}\r\n                  updateProblem={this.updateProblem}\r\n                  input={input}\r\n                  restart={this.handleRestart}\r\n                  hasSkip={hasSkip}\r\n                  isGameOver={timeLeft === 0}\r\n                />\r\n              </Problem>\r\n            ) : null}\r\n  \r\n            <button\r\n              className=\"button options-button\"\r\n              onClick={this.goToOptions}\r\n            >\r\n              Select a new mode\r\n            </button>         \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Video extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                 <iframe\r\n            className={`video ${this.props.mode}`}\r\n            src={this.props.url}\r\n            frameBorder=\"0\"\r\n            allow=\"autoplay; encrypted-media\"\r\n            allowFullScreen\r\n            title=\"video\"\r\n          />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport GameArea from \"./GameArea\";\r\nimport GameMode from \"./Modes\";\r\nimport Video from \"./Video\";\r\n\r\nimport \"./MathTrainer.css\";\r\nimport \"./Zen.css\";\r\nclass MathTrainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // This little hack keeps the trainer working correctly if the page is refreshed.\r\n    const options =\r\n      this.props.options.length > 0\r\n        ? this.props.options\r\n        : this.props.history.location.state.options;\r\n    this.Game = GameMode.newGame(options);\r\n    this.state = {\r\n      practice: this.Game.practice,\r\n      problem: { num1: 0, num2: 0, sign: \"\" },\r\n      input: \"\",\r\n      timeLeft:\r\n        this.Game.hasTimer || !this.Game.practice || this.Game.startTime,\r\n      isGameOver: true,\r\n      problems: [],\r\n      preGameTime: 3,\r\n    };\r\n  }\r\n\r\n  updateProblem = (wasSkipped) => {\r\n    let [num1, num2, sign] = this.Game.getNewProblem();\r\n    let answer;\r\n    if (sign === \"/\" && num1 !== 0) {\r\n      // Probably can clean this up.\r\n      // This has to be here (and not in the GameMode methods) because it overrides the generated problem.\r\n      let h = num1;\r\n      let num3 = num1 * num2;\r\n      answer = num2;\r\n      num1 = num3;\r\n      num2 = h;\r\n    } else {\r\n      answer = this.Game.compute(num1, num2, sign);\r\n    }\r\n    this.setState({\r\n      problem: { num1, num2, answer, sign },\r\n      input: \"\",\r\n    });\r\n    if (!wasSkipped) {\r\n      this.setState((s) => ({\r\n        timeLeft: s.timeLeft + this.Game.bonus,\r\n      }));\r\n    }\r\n  };\r\n\r\n  handleInput = (val) => {\r\n    let { num1, num2, sign, answer } = this.state.problem;\r\n    this.setState({ input: val });\r\n    // It's been like a month since I wrote this line, and I can't remember whether I need the double eqs.\r\n    // eslint-disable-next-line\r\n    if (this.state.problem.answer == val) { \r\n      this.setState(\r\n        {\r\n          problems: [\r\n            ...this.state.problems,\r\n            `${num1} ${sign} ${num2} = ${answer}`,\r\n          ],\r\n        },\r\n        () => {\r\n          if (!this.Game.isFinished(this.state.problems.length)) {\r\n            if (this.state.problems.length % 5 === 0) {\r\n              // I may want to abstract the threshold into the Mode classes.\r\n              this.Game.increaseChallenge();\r\n            }\r\n            this.updateProblem();\r\n          } else {\r\n            this.endGame();\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n  endGame = () => {\r\n    clearInterval(this.state.timerTimeLeft);\r\n    clearInterval(this.state.timerTimeTaken);\r\n    this.setState((s) => ({\r\n      isGameOver: true,\r\n      timeLeft: 0,\r\n      timeTaken: s.timeTaken + 1, // The timeLeft timer doesn't actually count all the way to 0, so this little addition gets the last second.\r\n    }));\r\n  };\r\n  tickTimer = () => {\r\n    // This feels pretty hacky to me, will probably want to clean up later.\r\n    if (this.state.timeLeft > 1) {\r\n      this.setState((s) => ({\r\n        timeLeft: s.timeLeft - 1,\r\n      }));\r\n    } else if (this.state.timeLeft === 1) {\r\n      this.endGame();\r\n    }\r\n  };\r\n\r\n  restart = () => {\r\n    this.updateProblem();\r\n    this.setState({ isGameOver: false, problems: [] });\r\n    if (this.Game.hasTimer) {\r\n      this.setState({\r\n        timeLeft: this.Game.startTime,\r\n        timeTaken: 0,\r\n        timerTimeLeft: setInterval(() => {\r\n          this.tickTimer();\r\n        }, 1000),\r\n        timerTimeTaken: setInterval(() => {\r\n          this.setState((s) => ({\r\n            timeTaken: s.timeTaken + 1,\r\n          }));\r\n        }, 1000),\r\n      });\r\n    }\r\n  };\r\n\r\n  goToOptions = () => {\r\n    this.props.handleRestart();\r\n    this.props.history.push(\"/Math-Trainer/options\", { isGameOver: true });\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Goes right into the Game if it's Zen, else starts the pregame timer\r\n    if (this.Game.mode === \"Zen\") {\r\n      this.restart();\r\n    } else {\r\n      this.setState({\r\n        timerPreGame: setInterval(() => {\r\n          this.setState((s) => ({ preGameTime: s.preGameTime - 1 }));\r\n          if (this.state.preGameTime < 1) {\r\n            this.restart();\r\n            clearInterval(this.state.timerPreGame);\r\n          }\r\n        }, 1000),\r\n      });\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.state.timerTimeLeft);\r\n    clearInterval(this.state.timerTimeTaken);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={`${this.Game.mode}`}>\r\n        {/* PreGame timer / game area */}\r\n        {this.Game.mode !== \"Zen\" && this.state.preGameTime > 0 ? (\r\n          <h2 className=\"pre-timer\">{this.state.preGameTime}</h2>\r\n        ) : (\r\n          <GameArea\r\n            {...this.state}\r\n            hasSkip={this.Game.hasSkip}\r\n            mode={this.Game.mode}\r\n            updateProblem={this.updateProblem}\r\n            handleInput={this.handleInput}\r\n            handleOptions={this.goToOptions}\r\n            restart={this.restart}\r\n          />\r\n        )}\r\n        {/* Video */}\r\n        {this.Game.mode === \"Zen\" ? (\r\n          <Video\r\n            url={\"https://www.youtube.com/embed/5qap5aO4i9A?autoplay=1\"}\r\n            mode={this.Game.mode}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MathTrainer;\r\n","import React, { Component } from \"react\";\r\nimport Options from \"./Options\";\r\nimport MathTrainer from \"./MathTrainer\";\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\n\r\nimport './StartPage.css'\r\n\r\nexport default class BasicTrainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isGameOver: true,\r\n      options: {},\r\n    };\r\n  }\r\n  handleOptions = (options) => {\r\n    this.setState({ isGameOver: false, options }, () => {\r\n      this.props.history.push(`/Math-Trainer/${options.mode}`, this.state)\r\n    })\r\n    \r\n  };\r\n  handleRestart =() => {\r\n    this.setState({isGameOver: true, options : {}})\r\n  }\r\n  render() {\r\n    const titleClass = 'title';\r\n    // I don't love this, but  dealing with route params (:gameMode) was a HUGE headache\r\n    // In the future, I'd like to build this from the GameMode object.\r\n    const modePaths = [\"/Math-Trainer/Normal\",\"/Math-Trainer/Zen\", \"/Math-Trainer/Blitz\", \"/Math-Trainer/Multiplication Tables\"]\r\n    return (\r\n<React.Fragment>\r\n       <div className='title-div'><h1 className={titleClass}>Number Crunches: A Mental Math Workout</h1></div>\r\n      <Switch>\r\n        <Route path=\"/Math-Trainer/options\" exact render={(routeProps) =><Options {...routeProps} handleOptions={this.handleOptions}/>}/>\r\n        <Route path={modePaths} exact render={routeProps => <MathTrainer {...routeProps} options={this.state.options} handleRestart={this.handleRestart} />}/>\r\n\r\n      <Route to=\"\" render={() => <Redirect to=\"/Math-Trainer/options\"/>}/>\r\n      </Switch>\r\n</React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport BasicTrainer from './Components/StartPage'\r\nimport {BrowserRouter as Router,  Route} from 'react-router-dom'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <Router>\r\n    <Route path='/' render={(routerProps) => <BasicTrainer {...routerProps} /> }/>\r\n    </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}