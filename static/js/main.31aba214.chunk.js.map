{"version":3,"sources":["Components/RadioGroup.js","Components/CheckboxGroup.js","Components/Modes.js","Components/Options.js","Components/GameOverMessage.js","Components/Problem.js","Components/ProblemList.js","Components/Input.js","Components/Timer.js","Components/GameArea.js","Components/Video.js","Components/MathTrainer.js","Components/StartPage.js","App.js","serviceWorker.js","index.js"],"names":["RadioGroup","handleChange","e","props","this","radios","map","r","key","id","className","radioClass","onChange","type","name","value","checked","disabled","htmlFor","Component","CheckboxGroup","event","target","boxes","boxVal","includes","enabledList","getRandom","array","Math","floor","random","length","BASE_RULES","max","min","startTime","totalProblems","practice","hasNumProbs","hasStartClock","allowedSigns","GameMode","params","Object","assign","hasTimer","bonus","ticks","clockDirection","hasSkip","challengeIncrease","Number","n1","n2","s","sign","signs","getNewNumbers","getRandomInt","options","mode","Normal","Blitz","Zen","MultiplicationTables","hasPractice","description","initGame","table","problem","i","j","push","nums","inOrder","filter","tuples","probNum","problemCount","Rules","keys","Modes","forEach","getDefaultRules","Options","handleSubmit","preventDefault","state","canStart","setState","handleOptions","handleCheckboxChange","values","practiceEnable","numProbsEnable","startClockEnable","chooseSignsEnable","rangeWarning","buttonClasses","onSubmit","GameOverMessage","handleRestart","restart","timeMessage","solved","timeElapsed","message","goal","mins","secs","onClick","Problem","num1","num2","children","ProblemList","problems","p","Input","handleInput","handleUpdateProblem","isGameOver","updateProblem","input","autoFocus","Timer","time","GameArea","val","goToOptions","timerMessage","answer","timeLeft","timeTaken","goHome","Video","src","url","frameBorder","allow","allowFullScreen","title","MathTrainer","wasSkipped","Game","getNewProblem","h","compute","isFinished","endGame","increaseChallenge","clearInterval","timerTimeLeft","timerTimeTaken","tickTimer","setInterval","history","location","newGame","preGameTime","timerPreGame","BasicTrainer","Fragment","path","exact","render","routeProps","to","App","routerProps","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.31aba214.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class RadioGroup extends Component {\r\n\r\n    handleChange = (e) => {\r\n        this.props.handleChange(e)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.props.radios.map(r => {\r\n                return (<div key={r.id} className={this.props.radioClass}>\r\n                    <input onChange={this.handleChange} type=\"radio\" name={this.props.name} value={r.id} id={r.id}\r\n                           checked={r.id === this.props.checked} disabled={this.props.disabled}/>\r\n                    <label htmlFor={r.id}>{r.id}</label>\r\n                </div>)\r\n            })\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class CheckboxGroup extends Component {\r\n\r\n    handleChange = (event) => {\r\n        this.props.handleChange(event.target.value)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.boxes.map(boxVal => {\r\n                    return <div key={boxVal}>\r\n                        <input type=\"checkbox\" id={boxVal} name={boxVal} value={boxVal} onChange={this.handleChange}\r\n                               checked={this.props.checked.includes(boxVal)}\r\n                               disabled={!this.props.enabledList.includes(boxVal)}/>\r\n                        <label htmlFor={boxVal}>{boxVal}</label>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}","const getRandom = function (array) {\r\n    const num = Math.floor(Math.random() * array.length);\r\n    return array[num];\r\n};\r\n\r\nclass BASE_RULES {\r\n    constructor() {\r\n        this.max = 10;\r\n        this.min = 1;\r\n        this.startTime = 10;\r\n        this.totalProblems = 50;\r\n        this.practice = false;\r\n        this.hasNumProbs = false;\r\n        this.hasStartClock = false;\r\n        this.allowedSigns = [\"+\", \"-\", \"×\", \"/\"];\r\n    }\r\n}\r\n\r\nclass GameMode {\r\n    constructor(params) {\r\n        Object.assign(this, params);\r\n        this.hasTimer = !this.practice;\r\n        this.bonus = 2;\r\n        this.ticks = true;\r\n        this.clockDirection = 1;\r\n        this.hasSkip = true;\r\n        this.challengeIncrease = 0;\r\n        this.max = Number(this.max);\r\n        this.min = Number(this.min);\r\n    }\r\n\r\n    static newGame(options) {\r\n        switch (options.mode) {\r\n            case \"Normal\":\r\n                return new Normal(options);\r\n            case \"Blitz\":\r\n                return new Blitz(options);\r\n            case \"Zen\":\r\n                return new Zen(options);\r\n            case \"Multiplication Tables\":\r\n                return new MultiplicationTables(options);\r\n            default:\r\n                return new Normal(options)\r\n        }\r\n    }\r\n\r\n    compute(n1, n2, s) {\r\n        if (s === \"×\") return n1 * n2;\r\n        if (s === \"+\") return n1 + n2;\r\n        if (s === \"-\") return n1 - n2;\r\n        if (s === \"/\") return n1 / n2;\r\n    }\r\n\r\n    getRandomInt() {\r\n        // if(this.max == this.min) return Number(this.min)\r\n        // This returns 0 if min and max are the same...\r\n        return Math.floor(Math.random() * (this.max - this.min + 1) + this.min);\r\n    }\r\n\r\n    getNewProblem() {\r\n        let n1, n2;\r\n        const sign = getRandom(this.signs);\r\n        do {\r\n            [n1, n2] = this.getNewNumbers();\r\n        } while (sign === \"/\" && n2 === 0); // Avoid 0 in the denominator\r\n        return [n1, n2, sign];\r\n    }\r\n\r\n    getNewNumbers() {\r\n        return [this.getRandomInt(), this.getRandomInt()];\r\n    }\r\n\r\n    isFinished() {\r\n        return false;\r\n    }\r\n\r\n    increaseChallenge() {\r\n        this.max += this.challengeIncrease;\r\n    }\r\n}\r\n\r\nclass Normal extends GameMode {\r\n    constructor(params) {\r\n        super(params);\r\n        this.challengeIncrease = 5;\r\n    }\r\n\r\n    static getDefaultRules() {\r\n        return Object.assign(new BASE_RULES(), {\r\n            id: \"Normal\",\r\n            hasPractice: true,\r\n            description:\r\n                \"Every correct answer adds more time to the clock, but be careful! The problems get harder the longer you  last.\",\r\n            hasStartClock: true,\r\n        });\r\n    }\r\n}\r\n\r\nclass MultiplicationTables extends GameMode {\r\n    constructor(params) {\r\n        super(params);\r\n        this.initGame();\r\n        this.clockDirection = 1;\r\n        this.hasSkip = false;\r\n    }\r\n\r\n    static getDefaultRules() {\r\n        return Object.assign(new BASE_RULES(), {\r\n            id: \"Multiplication Tables\",\r\n            ticks: true,\r\n            hasPractice: true,\r\n            description:\r\n                \"Like Normal mode, but let's you focus just on multiplication tables.\",\r\n            allowedSigns: [\"×\"],\r\n            hasStartClock: true,\r\n        });\r\n    }\r\n\r\n    initGame() {\r\n        this.table = [];\r\n        this.problem = 0;\r\n        for (let i = this.min; i <= this.max; i++) {\r\n            for (let j = this.min; j <= this.max; j++) {\r\n                this.table.push([i, j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    getNewNumbers() {\r\n        let nums;\r\n        if (this.inOrder) {\r\n            nums = this.table[0];\r\n        } else {\r\n            nums = getRandom(this.table);\r\n        }\r\n        this.table = this.table.filter((tuples) => {\r\n            return tuples !== nums;\r\n        });\r\n        return nums;\r\n    }\r\n\r\n    isFinished() {\r\n        if (this.problem === this.table.length) {\r\n            this.initGame();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nclass Zen extends GameMode {\r\n    constructor(params) {\r\n        super(params);\r\n        this.hasTimer = false;\r\n    }\r\n\r\n    static getDefaultRules() {\r\n        return Object.assign(new BASE_RULES(), {\r\n            id: \"Zen\",\r\n            description: \"Chill out with some music and endless math problems.\",\r\n        });\r\n    }\r\n}\r\n\r\nclass Blitz extends GameMode {\r\n    constructor(params) {\r\n        super(params);\r\n        this.clockDirection = -1;\r\n        this.startTime = 0;\r\n        this.bonus = 0;\r\n    }\r\n\r\n    static getDefaultRules() {\r\n        return Object.assign(new BASE_RULES(), {\r\n            id: \"Blitz\",\r\n            problemCount: true,\r\n            description: \"Solve a set number of problems as fast as you can!\",\r\n            hasNumProbs: true,\r\n        });\r\n    }\r\n\r\n    // I don't like this being a method. I need to figure a way to keep the game logic separate from the game rules\r\n    isFinished(probNum) {\r\n        // eslint-disable-next-line eqeqeq\r\n        return probNum == this.totalProblems;\r\n\r\n    }\r\n}\r\n\r\nexport default GameMode;\r\nexport {Normal, MultiplicationTables, Blitz, Zen};\r\n","import React, {Component} from \"react\";\r\nimport RadioGroup from \"./RadioGroup\";\r\nimport CheckboxGroup from \"./CheckboxGroup\";\r\nimport * as Modes from \"./Modes\";\r\n\r\nimport \"./Options.css\";\r\n\r\nlet Rules = {};\r\n\r\nObject.keys(Modes).forEach((mode) => {\r\n    if (!!Modes[mode].getDefaultRules) {\r\n        // This stops the abstract GameMode class from being added to the list\r\n        let r = Modes[mode].getDefaultRules();\r\n        Rules[r.id] = r;\r\n    }\r\n});\r\n\r\nexport default class Options extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {mode: \"Normal\", signs: [\"+\", \"-\"], canStart: true};\r\n        Object.assign(this.state, Rules[\"Normal\"]);\r\n        this.radios = [...Object.values(Rules)];\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.state.canStart) {\r\n            this.setState({id: this.state.mode});\r\n            this.props.handleOptions(this.state);\r\n        }\r\n    };\r\n    handleChange = (event) => {\r\n        if (event.target.name === \"practice\") {\r\n            let practice = this.state.practice;\r\n            this.setState({[event.target.name]: !practice});\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value});\r\n            this.setState(state => {\r\n                return {canStart: Number(state.min) <= Number(state.max)}\r\n            })\r\n        }\r\n\r\n        if (event.target.value === \"Multiplication Tables\") {\r\n            this.setState({signs: [\"×\"]});\r\n        }\r\n    };\r\n    handleCheckboxChange = (value) => {\r\n        let signs = this.state.signs;\r\n        if (signs.includes(value)) signs = signs.filter((s) => s !== value);\r\n        else signs.push(value);\r\n        this.setState({signs});\r\n\r\n    };\r\n\r\n    render() {\r\n        // This could have been ternary'd below, but it's already so cluttered, I wanted to put these all up here.\r\n        let practiceEnable = Rules[this.state.mode].hasPractice ? \"\" : \"disabled\";\r\n        let numProbsEnable = Rules[this.state.mode].hasNumProbs ? \"\" : \"disabled\";\r\n        let startClockEnable = Rules[this.state.mode].hasStartClock ? '' : 'disabled'\r\n        let chooseSignsEnable = Rules[this.state.mode].allowedSigns.length > 1 ? '' : 'disabled'\r\n\r\n        let rangeWarning = Number(this.state.min) > Number(this.state.max) ?\r\n            <span className=\"warning\">Min must not be higher than max.</span> : '';\r\n        let buttonClasses = \"button start-button \" + (!this.state.canStart ? 'disabled' : '');\r\n\r\n        return (\r\n            <div className=\"options\">\r\n                <form onSubmit={this.handleSubmit} className=\"options-form\">\r\n                    <div className=\"mode-select\">\r\n                        <RadioGroup\r\n                            name=\"mode\"\r\n                            radios={this.radios}\r\n                            handleChange={this.handleChange}\r\n                            checked={this.state.mode}\r\n                            radioClass={\"mode\"}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mode-options\">\r\n                        <div className=\"mode-info\">\r\n                            <h1 className=\"mode-title\">{this.state.mode}</h1>\r\n                            <div className=\"mode-desc-box\">\r\n                                <p className=\"mode-desc\">{Rules[this.state.mode].description}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mode-options-body\">\r\n                            <div className=\"mode-options-col\">\r\n                                <div className=\"mode-max-min\">\r\n                                    <div className=\"mode-max\">\r\n                                        <h2 id=\"range\" className={`form-area-label`}>Range {rangeWarning}</h2>\r\n\r\n                                        <label htmlFor=\"max\">Max:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            name=\"max\"\r\n                                            value={this.state.max}\r\n                                            onChange={this.handleChange}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"mode-min\">\r\n                                        <label htmlFor=\"min\">Min:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            name=\"min\"\r\n                                            value={this.state.min}\r\n                                            onChange={this.handleChange}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mode-signs\">\r\n                                    <h2 className={`${chooseSignsEnable} form-area-label`}>Choose Signs</h2>\r\n                                    <CheckboxGroup\r\n                                        boxes={[\"+\", \"-\", \"×\", \"/\"]}\r\n                                        checked={this.state.signs}\r\n                                        handleChange={this.handleCheckboxChange}\r\n                                        enabledList={Rules[this.state.mode].allowedSigns}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <h2 className={`${numProbsEnable} form-area-label`}>Number of Problems</h2>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"totalProblems\"\r\n                                        min={1}\r\n                                        value={this.state.totalProblems}\r\n                                        onChange={this.handleChange}\r\n                                        disabled={!Rules[this.state.mode].hasNumProbs}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <h2 className={`${practiceEnable} form-area-label`}>Practice Mode</h2>\r\n                                    <RadioGroup\r\n                                        handleChange={this.handleChange}\r\n                                        name=\"practice\"\r\n                                        radios={[{id: \"On\"}, {id: \"Off\"}]}\r\n                                        checked={this.state.practice === true ? \"On\" : \"Off\"}\r\n                                        disabled={!Rules[this.state.mode].hasPractice}\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <h2 className={`${startClockEnable} form-area-label`}>Seconds on Clock</h2>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={this.state.startTime}\r\n                                        name=\"startTime\"\r\n                                        min={2}\r\n                                        onChange={this.handleChange}\r\n                                        disabled={!Rules[this.state.mode].hasStartClock}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <input className={buttonClasses} type=\"submit\" value=\"Start\"/>\r\n\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nclass GameOverMessage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    handleRestart = () => {\r\n        this.props.restart();\r\n    };\r\n\r\n    render() {\r\n        let {solved, timeElapsed, goal} = this.props;\r\n        let message = solved >= goal ? \"Great Job!\" : \"Keep trying!\";\r\n\r\n        let timeMessage;\r\n        if (timeElapsed >= 60) {\r\n            let mins = Math.floor(timeElapsed / 60);\r\n            let secs = timeElapsed % 60;\r\n            timeMessage = `${mins} minute${mins > 1 ? \"s\" : \"\"}${\r\n                secs > 0 ? ` and ${secs} second${secs > 1 ? \"s\" : \"\"}` : \"\"\r\n            }`;\r\n        } else timeMessage = `${timeElapsed} seconds`;\r\n        return (\r\n            <div>\r\n                <h1>{`You solved ${solved} problems in ${timeMessage}!`}</h1>\r\n                <h2>{message}</h2>\r\n                <button className=\"button\" onClick={this.handleRestart}>Try again?</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameOverMessage;\r\n","import React, {Component} from \"react\";\r\n\r\nimport './Problem.css'\r\n\r\nexport default class Problem extends Component {\r\n\r\n    render() {\r\n        let {num1, num2, sign, mode} = this.props\r\n        return (\r\n            <div className={` ${mode} problem-wrap`}>\r\n                <div className={` problem`}>\r\n        <span>\r\n        {num1} {sign} {num2} = \r\n        </span>\r\n                </div>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\n\r\nexport default class ProblemList extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"problem-list\">\r\n                {this.props.problems.map((p, i) => {\r\n                    return (\r\n                        // I know indexes aren't great for keys, but I think in this case, where the list won't change, it's probably not a problem.\r\n                        //(Famous last words...)\r\n                        <span className={`${this.props.mode} problem`} key={i}>\r\n                    {p}\r\n                  </span>\r\n                    );\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\n\r\nimport './Input.css'\r\n\r\nexport default class Input extends Component {\r\n\r\n    handleInput = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleInput(event.target.value)\r\n    }\r\n    handleUpdateProblem = () => {\r\n        if (this.props.isGameOver) {\r\n            this.props.handleRestart();\r\n        } else\r\n            this.props.updateProblem(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input\">\r\n                <input\r\n                    className=\"answer\"\r\n                    type=\"text\"\r\n                    onChange={this.handleInput}\r\n                    value={this.props.input}\r\n                    autoFocus\r\n                />\r\n                {this.props.hasSkip ?\r\n                    <button className=\"skip-button button\"\r\n                            onClick={this.handleUpdateProblem}>{this.props.isGameOver ? 'restart' : 'skip'}</button>\r\n                    : null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react'\r\n\r\n\r\nexport default class Timer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>\r\n                    {this.props.time}\r\n                </h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport GameOverMessage from './GameOverMessage'\r\nimport Problem from './Problem'\r\nimport ProblemList from './ProblemList'\r\nimport Input from './Input'\r\nimport Timer from './Timer'\r\n\r\nexport default class GameArea extends Component {\r\n    handleInput = (val) => {\r\n        this.props.handleInput(val)\r\n    }\r\n    updateProblem = () => {\r\n        this.props.updateProblem(true)\r\n    }\r\n    handleRestart = () => {\r\n        this.props.restart()\r\n    }\r\n\r\n    goToOptions = () => {\r\n        this.props.handleOptions()\r\n    }\r\n\r\n    render() {\r\n        const {num1, num2, answer, sign} = this.props.problem\r\n        const {input, mode, isGameOver, timeLeft, timeTaken, problems, hasSkip, practice} = this.props\r\n        let timerMessage;\r\n        // I'm not a fan of this nested statement...\r\n        if (mode !== 'Zen' && !practice) {\r\n            timerMessage = !isGameOver ? (\r\n                <Timer time={timeLeft || timeTaken || 0}/>\r\n            ) : (\r\n                <GameOverMessage\r\n                    solved={problems.length}\r\n                    timeElapsed={timeTaken}\r\n                    goal={3}\r\n                    restart={this.handleRestart}\r\n                    goHome={this.handleOptions}\r\n                />\r\n            )\r\n        } else timerMessage = null\r\n        return (\r\n            <div className=\"game-area\">\r\n                {/* Problem List */}\r\n                {mode === \"Zen\" ? <ProblemList mode={mode} problems={problems}/>\r\n                    : null}\r\n                {/* Timer / Message */}\r\n                {timerMessage}\r\n                {/* Problem & Input */}\r\n                {timeLeft > 0 || !isGameOver ? (\r\n                    <Problem\r\n                        mode={mode}\r\n                        num1={num1}\r\n                        num2={num2}\r\n                        answer={answer}\r\n                        sign={sign}\r\n                        probNum={problems.length + 1}\r\n                    >\r\n                        <Input\r\n                            handleInput={this.handleInput}\r\n                            updateProblem={this.updateProblem}\r\n                            input={input}\r\n                            restart={this.handleRestart}\r\n                            hasSkip={hasSkip}\r\n                            isGameOver={timeLeft === 0}\r\n                        />\r\n                    </Problem>\r\n                ) : null}\r\n\r\n                <button\r\n                    className=\"button options-button\"\r\n                    onClick={this.goToOptions}\r\n                >\r\n                    Select a new mode\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\n\r\nexport default class Video extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <iframe\r\n                    className={`video ${this.props.mode}`}\r\n                    src={this.props.url}\r\n                    frameBorder=\"0\"\r\n                    allow=\"autoplay; encrypted-media\"\r\n                    allowFullScreen\r\n                    title=\"video\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport GameArea from \"./GameArea\";\r\nimport GameMode from \"./Modes\";\r\nimport Video from \"./Video\";\r\n\r\nimport \"./MathTrainer.css\";\r\nimport \"./Zen.css\";\r\n\r\nclass MathTrainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // This little hack keeps the trainer working correctly if the page is refreshed.\r\n        const options =\r\n            this.props.options.length > 0\r\n                ? this.props.options\r\n                : this.props.history.location.state.options;\r\n        this.Game = GameMode.newGame(options);\r\n        this.state = {\r\n            practice: this.Game.practice,\r\n            problem: {num1: 0, num2: 0, sign: \"\"},\r\n            input: \"\",\r\n            timeLeft:\r\n                this.Game.hasTimer || !this.Game.practice || this.Game.startTime,\r\n            isGameOver: true,\r\n            problems: [],\r\n            preGameTime: 3,\r\n        };\r\n    }\r\n\r\n    updateProblem = (wasSkipped) => {\r\n        let [num1, num2, sign] = this.Game.getNewProblem();\r\n        let answer;\r\n        if (sign === \"/\" && num1 !== 0) {\r\n            // Probably can clean this up.\r\n            // This has to be here (and not in the GameMode methods) because it overrides the generated problem.\r\n            let h = num1;\r\n            let num3 = num1 * num2;\r\n            answer = num2;\r\n            num1 = num3;\r\n            num2 = h;\r\n        } else {\r\n            answer = this.Game.compute(num1, num2, sign);\r\n        }\r\n        this.setState({\r\n            problem: {num1, num2, answer, sign},\r\n            input: \"\",\r\n        });\r\n        if (!wasSkipped) {\r\n            this.setState((s) => ({\r\n                timeLeft: s.timeLeft + this.Game.bonus,\r\n            }));\r\n        }\r\n    };\r\n\r\n    handleInput = (val) => {\r\n        let {num1, num2, sign, answer} = this.state.problem;\r\n        this.setState({input: val});\r\n        // It's been like a month since I wrote this line, and I can't remember whether I need the double eqs.\r\n        // eslint-disable-next-line\r\n        if (this.state.problem.answer == val) {\r\n            this.setState(\r\n                {\r\n                    problems: [\r\n                        ...this.state.problems,\r\n                        `${num1} ${sign} ${num2} = ${answer}`,\r\n                    ],\r\n                },\r\n                () => {\r\n                    if (!this.Game.isFinished(this.state.problems.length)) {\r\n                        if (this.state.problems.length % 5 === 0) {\r\n                            // I may want to abstract the threshold into the Mode classes.\r\n                            this.Game.increaseChallenge();\r\n                        }\r\n                        this.updateProblem();\r\n                    } else {\r\n                        this.endGame();\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    };\r\n    endGame = () => {\r\n        clearInterval(this.state.timerTimeLeft);\r\n        clearInterval(this.state.timerTimeTaken);\r\n        this.setState((s) => ({\r\n            isGameOver: true,\r\n            timeLeft: 0,\r\n            timeTaken: s.timeTaken + 1, // The timeLeft timer doesn't actually count all the way to 0, so this little addition gets the last second.\r\n        }));\r\n    };\r\n    tickTimer = () => {\r\n        // This feels pretty hacky to me, will probably want to clean up later.\r\n        if (this.state.timeLeft > 1) {\r\n            this.setState((s) => ({\r\n                timeLeft: s.timeLeft - 1,\r\n            }));\r\n        } else if (this.state.timeLeft === 1) {\r\n            this.endGame();\r\n        }\r\n    };\r\n\r\n    restart = () => {\r\n        this.updateProblem();\r\n        this.setState({isGameOver: false, problems: []});\r\n        if (this.Game.hasTimer) {\r\n            this.setState({\r\n                timeLeft: this.Game.startTime,\r\n                timeTaken: 0,\r\n                timerTimeLeft: setInterval(() => {\r\n                    this.tickTimer();\r\n                }, 1000),\r\n                timerTimeTaken: setInterval(() => {\r\n                    this.setState((s) => ({\r\n                        timeTaken: s.timeTaken + 1,\r\n                    }));\r\n                }, 1000),\r\n            });\r\n        }\r\n    };\r\n\r\n    goToOptions = () => {\r\n        this.props.handleRestart();\r\n        this.props.history.push(\"/Math-Trainer/options\", {isGameOver: true});\r\n    };\r\n\r\n    componentDidMount() {\r\n        // Goes right into the Game if it's Zen, else starts the pregame timer\r\n        if (this.Game.mode === \"Zen\") {\r\n            this.restart();\r\n        } else {\r\n            this.setState({\r\n                timerPreGame: setInterval(() => {\r\n                    this.setState((s) => ({preGameTime: s.preGameTime - 1}));\r\n                    if (this.state.preGameTime < 1) {\r\n                        this.restart();\r\n                        clearInterval(this.state.timerPreGame);\r\n                    }\r\n                }, 1000),\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.timerTimeLeft);\r\n        clearInterval(this.state.timerTimeTaken);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`${this.Game.mode}`}>\r\n                {/* PreGame timer / game area */}\r\n                {this.Game.mode !== \"Zen\" && this.state.preGameTime > 0 ? (\r\n                    <h2 className=\"pre-timer\">{this.state.preGameTime}</h2>\r\n                ) : (\r\n                    <GameArea\r\n                        {...this.state}\r\n                        hasSkip={this.Game.hasSkip}\r\n                        mode={this.Game.mode}\r\n                        updateProblem={this.updateProblem}\r\n                        handleInput={this.handleInput}\r\n                        handleOptions={this.goToOptions}\r\n                        restart={this.restart}\r\n                    />\r\n                )}\r\n                {/* Video */}\r\n                {this.Game.mode === \"Zen\" ? (\r\n                    <Video\r\n                        url={\"https://www.youtube.com/embed/5qap5aO4i9A?autoplay=1\"}\r\n                        mode={this.Game.mode}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MathTrainer;\r\n","import React, {Component} from \"react\";\r\nimport Options from \"./Options\";\r\nimport MathTrainer from \"./MathTrainer\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\n\r\nimport './StartPage.css'\r\n\r\nexport default class BasicTrainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isGameOver: true,\r\n            options: {},\r\n        };\r\n    }\r\n\r\n    handleOptions = (options) => {\r\n        this.setState({isGameOver: false, options}, () => {\r\n            this.props.history.push(`/Number-Crunches/${options.mode}`, this.state)\r\n        })\r\n\r\n    };\r\n    handleRestart = () => {\r\n        this.setState({isGameOver: true, options: {}})\r\n    }\r\n\r\n    render() {\r\n        const titleClass = 'title';\r\n        // I don't love this, but  dealing with route params (:gameMode) was a HUGE headache\r\n        // In the future, I'd like to build this from the GameMode object.\r\n        const modePaths = [\"/Number-Crunches/Normal\", \"/Number-Crunches/Zen\", \"/Number-Crunches/Blitz\", \"/Number-Crunches/Multiplication Tables\"]\r\n        return (\r\n            <React.Fragment>\r\n                <div className='title-div'><h1 className={titleClass}>Number Crunches: A Mental Math Workout</h1></div>\r\n                <Switch>\r\n                    <Route path=\"/Number-Crunches/options\" exact\r\n                           render={(routeProps) => <Options {...routeProps} handleOptions={this.handleOptions}/>}/>\r\n                    <Route path={modePaths} exact\r\n                           render={routeProps => <MathTrainer {...routeProps} options={this.state.options}\r\n                                                              handleRestart={this.handleRestart}/>}/>\r\n\r\n                    <Route to=\"\" render={() => <Redirect to=\"/Number-Crunches/options\"/>}/>\r\n                </Switch>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport BasicTrainer from './Components/StartPage'\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <Route path='/' render={(routerProps) => <BasicTrainer {...routerProps} />}/>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'},\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}